name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'   # Only trigger when code in the frontend folder changes
  workflow_dispatch:     

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Install necessary dependencies
      run: cd starter/frontend && npm ci

    - name: Run Lint
      run: cd starter/frontend && npm run lint
  
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Install necessary dependencies
        run: |
          cd starter/frontend && npm ci
        
      - name: Run Tests
        run: |
          cd starter/frontend && npm run test
  Build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
  

    - name: Login to Amazon ECR  
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Configure Kubeconfig
      run: 
       aws eks update-kubeconfig --name cluster --region us-east-1

    - name: Get Backend Service URL
      id: get_backend_url
      run: |
          cd starter/frontend/k8s
          kubectl get svc -A
          BACKEND_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$BACKEND_URL" ]; then
            echo "Error: Backend service URL is not available"
            exit 1
          fi
          echo "BACKEND_URL=${BACKEND_URL}"
          echo "::set-output name=backend_url::${BACKEND_URL}"


    - name: Build and push Docker image to Amazon ECR
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
      run: |
        cd starter/frontend
        echo " BACKEND_URL=${{ steps.get_backend_url.outputs.backend_url }}"
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://${{ steps.get_backend_url.outputs.backend_url }} --tag 351604726464.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
        docker push 351604726464.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG

    - name: Deploy Docker Image to Amazon EKS
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
      run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=351604726464.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
          kustomize build | kubectl apply -f -

    - name: Display fronted service URL
      run: |
        cd starter/frontend/k8s
        echo "Waiting for frontend service external IP..."
        for i in {1..30}; do
          SERVICE_URL=$(kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$SERVICE_URL" ]; then
            echo "Frontend Service URL: $SERVICE_URL"
            break
          fi
          echo "Waiting for service to get an external IP..."
          sleep 10
        done

        if [ -z "$SERVICE_URL" ]; then
          echo "Error: Timed out waiting for service to get an external IP"
          exit 1
        fi